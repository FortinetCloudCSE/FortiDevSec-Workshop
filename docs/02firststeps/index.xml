<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Application Setup and Launch on Hugo for Fortinet TECWorkshops</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02firststeps.html</link><description>Recent content in Application Setup and Launch on Hugo for Fortinet TECWorkshops</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02firststeps/index.xml" rel="self" type="application/rss+xml"/><item><title>App Repository Setup</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02firststeps/repositorysetup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02firststeps/repositorysetup.html</guid><description>Set Up the Application Repository Navigate to the AWS Goat application homepage, and click &amp;lsquo;Fork&amp;rsquo; near the top right of the page.
Enter a name for your forked version of the repo, make sure the Copy the master branch only box is checked, and click Create fork.
At the github repository homepage for your newly forked repository, click the green Code dropdown, click the &amp;lsquo;HTTPS&amp;rsquo; tab, and copy the url to the clipboard.</description></item><item><title>Github Actions Runner Setup (Optional)</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02firststeps/githubactions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02firststeps/githubactions.html</guid><description>Note: This section walks you through setting up a self-hosted GitHub Actions runner on an AWS EC2 instance. If you&amp;rsquo;d prefer to use the &amp;lsquo;ubuntu-latest&amp;rsquo; version which the original workflow files are already configured to use, you may skip this section altogether and proceed to the application launch step.
GitHub Actions Runner Setup For this task, you will need to deploy a CloudFormation template which will launch an EC2 instance as a self-hosted Github Actions runner.</description></item><item><title>Application Launch</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02firststeps/applicationlaunch.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02firststeps/applicationlaunch.html</guid><description>Application Launch For this task, you will utilize the Github Actions runner created in a previous step to deploy a Terraform stack. The stack will contain several resources as part of a vulnerable web application reachable from the public internet. The URL can then be supplied to FortiDevSec to run a DAST scan.
As a reminder, to complete this part of the lab, you will need an AWS User Access Key with Administrative permissions Terraform will need to create resources in your account.</description></item><item><title>JIRA Setup</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02firststeps/setupjira.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02firststeps/setupjira.html</guid><description>Set Up a JIRA Bug Tracking Project This task will involve integrating JIRA with FortiDevSec.
First, in a web browser, navigate to JIRA and log in to your account. Click the Projects dropdown, and click Create project.
Select the Software development project template.
Click Bug tracking.
Click Use template.
Create a name and key for your project, and click Create project.
Now, you&amp;rsquo;ll need to create an API key which we&amp;rsquo;ll later supply to FortiDevSec.</description></item><item><title>Discussion</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02firststeps/discussion.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02firststeps/discussion.html</guid><description>Discussion FortiDevSec provides diverse scanning capabilities and can integrate with a broad swath of CI/CD tools, including Jenkins, AWS CodePipeline, and Github Actions, amongst others. It enables quick identification and ranking of vulnerabilities across a heterogenous codebase that may include application, infrastructure, and container code and third-party libraries. It provides insights in a consolodiated dashboard, and integrates seamlessly with JIRA issue-tracking software. Types of testing supported by FortiDevSec include SAST, SCA, Secrets, DAST, IaC, and container.</description></item></channel></rss>