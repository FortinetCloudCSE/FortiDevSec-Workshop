<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FortiDevSec Workshop on Hugo for Fortinet TECWorkshops</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/index.html</link><description>Recent content in FortiDevSec Workshop on Hugo for Fortinet TECWorkshops</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://fortinetcloudcse.github.io/FortiDevSec-Workshop/index.xml" rel="self" type="application/rss+xml"/><item><title>Prerequisites</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/01prerequisites.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/01prerequisites.html</guid><description>Prerequisites In order to complete this workshop, you will need the following:
Access to a Linux command line with docker as well as the AWS CLI installed and configured. If you are using MacOS, the MacOS Terminal should suffice. If you are using Windows, WSL (Windows Subsystem for Linux) is recommended. For more information including how to set up WSL in your Windows environment, please see here. To run Docker, you will need a Docker Engine installed in your OS.</description></item><item><title>Repository Setup</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02repositorysetup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02repositorysetup.html</guid><description>Application Setup and Launch (45 minutes) In this section, you&amp;rsquo;ll fork a GitHub repository popular for various cybersecurity scanning and demonstration activities. You&amp;rsquo;ll clone it locally, and then get an introduction to the FortiDevSec console, where you&amp;rsquo;ll configure an application associated with the repository. Afterwards, you&amp;rsquo;ll set up a JIRA Bug-tracking project for integration with FortiDevSec. This will all be in preparation for the following sections, where you&amp;rsquo;ll run actual SAST and DAST scans on the application from the command line and examine the results in the FortiDevSec, FortiDAST, and JIRA consoles as well.</description></item><item><title>Running SAST Scans Locally</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/03sast.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/03sast.html</guid><description>Running SAST Scans Locally (25 minutes) In this section, you&amp;rsquo;ll run a SAST scan on your forked AWS Goat repository. Before runnning the scan, however, you&amp;rsquo;ll first configure FortiDevSec to integrate with JIRA. After the scan completes, you&amp;rsquo;ll view the results both in the FortiDevSec and in JIRA, and understand how to sync ticket status updates from JIRA back to FortiDevSec.</description></item><item><title>Running FortiDAST Scans Locally</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast.html</guid><description>Running FortiDAST Scans Locally (25 minutes) In this chapter, you&amp;rsquo;ll launch a live, web-exposed application using Terraform and GitHub actions. You&amp;rsquo;ll then run a FortiDAST scan locally from the command line and view the results in the console, observing the types of vulnerabilities FortiDAST may uncover and how to quickly get more information on each from public cybersecurity resources.</description></item></channel></rss>