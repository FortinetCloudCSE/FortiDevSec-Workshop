<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FortiDevSec Workshop on Hugo for Fortinet TECWorkshops</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/index.html</link><description>Recent content in FortiDevSec Workshop on Hugo for Fortinet TECWorkshops</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://fortinetcloudcse.github.io/FortiDevSec-Workshop/index.xml" rel="self" type="application/rss+xml"/><item><title>Prerequisites</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/01prerequisites.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/01prerequisites.html</guid><description>Prerequisites In order to complete this workshop, you will need the following:
Access to a Linux command line with docker as well as the AWS CLI installed and configured. If you are using MacOS, the MacOS Terminal should suffice. If you are using Windows, WSL (Windows Subsystem for Linux) is recommended. For more information including how to set up WSL in your Windows environment, please see here. To run Docker, you will need a Docker Engine installed in your OS.</description></item><item><title>Application Setup and Launch</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02firststeps.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/02firststeps.html</guid><description>Application Setup and Launch (45 minutes) In this chapter, youâ€™ll fork a GitHub repository containing the code of a popular vulnerable web application and clone it locally. You&amp;rsquo;ll then (optionally) set up a self-hosted GitHub Actions runner on an EC2 instance in AWS to deploy the app with Terraform. If you&amp;rsquo;d prefer to use an alternate GitHub-hosted runner, such as &amp;lsquo;ubuntu-latest&amp;rsquo;, which the original workflow files are pre-configured to use, you may do that as well.</description></item><item><title>Running SAST Scans Locally</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/03sast.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/03sast.html</guid><description>Running SAST Scans Locally (25 minutes) In this chapter, you&amp;rsquo;ll set up a FortiDevSec application in the console, integrate it with JIRA, and issue the Docker command to run a SAST scan manually at the command line. You&amp;rsquo;ll then view the results both in the console and in JIRA and observe how updates to your JIRA workflow propagate back to FortiDevSec.</description></item><item><title>Running FortiDAST Scans Locally</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast.html</guid><description>Running FortiDAST Scans Locally (25 minutes) In this chapter, you&amp;rsquo;ll run a FortiDAST scan locally from the command line and view the results in the console, observing the types of vulnerabilities FortiDAST may uncover and how to quickly get more information on each from public cybersecurity resources.</description></item></channel></rss>