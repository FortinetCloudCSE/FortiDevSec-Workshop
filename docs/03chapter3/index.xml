<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ch 3 - Hugo Publish on Hugo for Fortinet TECWorkshops</title><link>https://fortinetcloudcse.github.io/UserRepo/03chapter3.html</link><description>Recent content in Ch 3 - Hugo Publish on Hugo for Fortinet TECWorkshops</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://fortinetcloudcse.github.io/UserRepo/03chapter3/index.xml" rel="self" type="application/rss+xml"/><item><title>Task 1 - Build Hugo page</title><link>https://fortinetcloudcse.github.io/UserRepo/03chapter3/2_task1.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/03chapter3/2_task1.html</guid><description>Hugo Build When you&amp;rsquo;re satisfied with Hugo view of your content in Hugo virtual server, issue a Hugo &amp;lsquo;build&amp;rsquo; in the container CLI
hugo --minify --cleanDestinationDir This command &amp;ldquo;builds&amp;rdquo; your Hugo site into the container&amp;rsquo;s /public folder. We used a docker disk mount to map this folder back to your local /docs folder, so the Hugo website will automatically be copied back into your local repo flag &amp;lsquo;&amp;ndash;cleanDestinationDir&amp;rsquo; tells hugo to re-write the entire output directory with its build, so it will clear out template files/anything else that may be in there You can now exit the container with ctrl + cd, or command: &amp;rsquo;exit&amp;rsquo; When you exit the container, any files stored or changes you made to the container will be lost and cannot be recovered Remember we edited the /content folder on our local OS, so those changes were not made to the container and will not be lost Further, the disk mount from local&amp;rsquo;s /docs to Container&amp;rsquo;s public AUTOMATICALLY writes the hugo build to your local OS, so those changes will not be lost If you need to continue editing, just run a new container from your built image, and run hugo&amp;rsquo;s webserver.</description></item><item><title>Task 2 - Push content to your repo</title><link>https://fortinetcloudcse.github.io/UserRepo/03chapter3/3_task2.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/03chapter3/3_task2.html</guid><description>Push your content to GitHubo repo Finally, from your local workstation CLI, push the newly created Hugo site up to GitHub to automatically publish your Hugo Site
git add . git commit -m &amp;#34;&amp;lt;my commit message&amp;gt;&amp;#34; git push Remember we&amp;rsquo;re always working in a Git Branch, so you should get in the habit of issuing a Pull request and merge using our GitFlow procedure
Info This is mostly applicable when working in a collaborative environment where multiple people may be pushing to the repo with different branches/PR to main.</description></item><item><title>Git Flow</title><link>https://fortinetcloudcse.github.io/UserRepo/03chapter3/gitflow.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/03chapter3/gitflow.html</guid><description>GitHub Repo Getting Started (General Workflow for GitHub Repos) Once your repo and pipeline have been created, you will be provided with the GitHub repo link which you can use to clone and begin content creation. First, navigate to a desired local directory and clone the repo with the provided link:
cd &amp;lt;desired parent directory&amp;gt; git clone &amp;lt;provided link&amp;gt; cd &amp;lt;cloned repo directory&amp;gt; Create a feature branch to begin working on your desired changes.</description></item></channel></rss>