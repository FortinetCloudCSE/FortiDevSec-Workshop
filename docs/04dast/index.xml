<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Running FortiDAST Scans Locally on Hugo for Fortinet TECWorkshops</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast.html</link><description>Recent content in Running FortiDAST Scans Locally on Hugo for Fortinet TECWorkshops</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast/index.xml" rel="self" type="application/rss+xml"/><item><title>DAST Scan</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast/31_dastscans.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast/31_dastscans.html</guid><description>DAST Scan First, open up your command line interface and navigate to the application top-level directory.
cd ~/AWSGoat Open up the fdevsec.yaml file and modify it as below, removing previous configuration settings for the SAST, SCA, container, IaC, and Secrets scans, and adding settings for the DAST scan. You&amp;rsquo;ll need the application URL you noted down in Chapter 1.
version: v1 id: org: &amp;lt;Org ID&amp;gt; app: &amp;lt;App ID&amp;gt; scanners: - dast dast: url: &amp;lt;your app url, i.</description></item><item><title>Discussion</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast/32_discussionpoints.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast/32_discussionpoints.html</guid><description>Discussion Static code scans are a powerful tool to catch vulnerabilities and security issues in code at rest before it&amp;rsquo;s deployed. However, they may not always discover vulnerabilities that arise once the code has been deployed and the application is exposed to the internet. This is why static scans are often coupled with dynamic scans which probe a live, running application for vulnerabilities a malicious actor may seek to exploit in the wild during runtime.</description></item></channel></rss>