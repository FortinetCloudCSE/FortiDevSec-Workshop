<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Running FortiDAST Scans Locally on Hugo for Fortinet TECWorkshops</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast.html</link><description>Recent content in Running FortiDAST Scans Locally on Hugo for Fortinet TECWorkshops</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast/index.xml" rel="self" type="application/rss+xml"/><item><title>Application Launch</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast/applicationlaunch.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast/applicationlaunch.html</guid><description>Application Launch For this task, you will deploy a live, web-exposed application via Terraform and GitHub Actions. Several resources will be deployed in your AWS account during launch. After launch completion, a URL will be provided which needs to be supplied to FortiDAST to run a DAST scan.
As a reminder, to complete this part of the lab, you will need an AWS User Access Key with Administrative permissions Terraform will need to create resources in your account.</description></item><item><title>DAST Scan</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast/dastscan.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast/dastscan.html</guid><description>DAST Scan First, open up your command line interface and navigate to the application top-level directory.
cd ~/AWSGoat Open up the fdevsec.yaml file and modify it as below, removing previous configuration settings for the SAST, SCA, container, IaC, and Secrets scans, and adding settings for the DAST scan. You&amp;rsquo;ll need the application URL you noted down in Chapter 1.
version: v1 id: org: &amp;lt;Org ID&amp;gt; app: &amp;lt;App ID&amp;gt; scanners: - dast dast: url: &amp;lt;your app url, i.</description></item><item><title>Application Teardown</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast/applicationdelete.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast/applicationdelete.html</guid><description>Application Teardown Navigate back to the GitHub console in your web browser, and click the Actions tab in your repository.
Click Terraform Destroy.
Click the Run workflow dropdown on the right-hand side of the page, and ensure the master branch and module-1 are selected in the first and second dropdowns, respectively, and click the Run workflow button.</description></item><item><title>Discussion</title><link>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast/discussion.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/FortiDevSec-Workshop/04dast/discussion.html</guid><description>Discussion Static code scans are a powerful tool to catch vulnerabilities and security issues in code at rest before it&amp;rsquo;s deployed. However, they may not always discover vulnerabilities that arise once the code has been deployed and the application is exposed to the internet. This is why static scans are often coupled with dynamic scans which probe a live, running application for vulnerabilities a malicious actor may seek to exploit in the wild during runtime.</description></item></channel></rss>